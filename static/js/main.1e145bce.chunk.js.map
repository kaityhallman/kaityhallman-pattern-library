{"version":3,"sources":["components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","components/Label/Label.js","components/Label/index.js","../config/componentData.js","docs/examples/EyeIcon/EyeIcon.js","docs/examples/Label/ExampleOptional.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Homepage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["ProgressBar","getColor","percent","_this","props","getWidthAsPercentOfTotalWidth","parseInt","width","_this$props","this","height","react_default","a","createElement","style","border","backgroundColor","React","Component","defaultProps","__webpack_require__","d","__webpack_exports__","components_ProgressBar_ProgressBar","TextInput","_ref","htmlId","name","label","_ref$type","type","_ref$required","required","onChange","placeholder","value","error","children","Object","objectWithoutProperties","marginBottom","Label","htmlFor","assign","id","className","color","TextInput_TextInput","PasswordInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","onClick","marginLeft","EyeIcon","toggled","length","components_PasswordInput_PasswordInput","fill","xmlns","viewBox","transform","cx","cy","r","EyeIcon_EyeIcon","Label_Label","module","exports","description","code","examples","defaultValue","computed","confirmationMessage","onSubmit","minPasswordLength","EyeIconExample","toggleEyeColor","react__WEBPACK_IMPORTED_MODULE_5___default","patterns_EyeIcon__WEBPACK_IMPORTED_MODULE_6__","ExampleOptional","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","patterns_Label__WEBPACK_IMPORTED_MODULE_1__","ExampleAllFeatures","_Users_khallman_Sites_kaityhallman_pattern_library_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_khallman_Sites_kaityhallman_pattern_library_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_khallman_Sites_kaityhallman_pattern_library_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","password","target","Fragment","patterns_PasswordInput__WEBPACK_IMPORTED_MODULE_6__","minLength","getQuality","Example100Percent","patterns_ProgressBar__WEBPACK_IMPORTED_MODULE_1__","Example10Percent","Example70Percent","ExampleError","patterns_TextInput__WEBPACK_IMPORTED_MODULE_1__","RegistrationForm","user","validate","submitted","email","errors","concat","getOwnPropertyNames","_this$state","_this$state$user","passwordQuality","ExampleRegistrationForm","components_RegistrationForm_RegistrationForm","console","log","map","./EyeIcon/EyeIcon","./EyeIcon/EyeIcon.js","./Label/ExampleOptional","./Label/ExampleOptional.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./ProgressBar/Example100Percent","./ProgressBar/Example100Percent.js","./ProgressBar/Example10Percent","./ProgressBar/Example10Percent.js","./ProgressBar/Example70Percent","./ProgressBar/Example70Percent.js","./RegistrationForm/ExampleRegistrationForm","./RegistrationForm/ExampleRegistrationForm.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","webpackContext","req","webpackContextResolve","e","Error","keys","resolve","Navigation","components","linkClass","classnames","active","window","location","href","includes","key","CodeExample","Prism","highlightAll","ref","element","Example","_props$example","example","ExampleComponent","require","componentName","default","html","ReactDOMServer","renderToStaticMarkup","docs_CodeExample","Props","ComponentPage","component","docs_Props","Homepage","Docs","renderRoute","route","componentData","filter","renderComponents","hash","substr","_this2","addEventListener","docs_Navigation","docs_ComponentPage","Boolean","hostname","match","ReactDOM","render","Docs_Docs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e145bce.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n  getColor = percent => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const { percent, width, height } = this.props;\n    return (\n      <div style={{ border: '1px solid lightgray', width }}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;","export { default } from './ProgressBar';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement and required field marker. */\nfunction TextInput({\n  htmlId,\n  name,\n  label,\n  type = 'text',\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  return (\n    <div style={{ marginBottom: 16 }}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && { border: 'solid 1px red' }}\n        {...props}\n      />\n      {children}\n      {error && <div className=\"error\" style={{ color: 'red' }}>{error}</div>}\n    </div>\n  )\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;","export { default } from './TextInput';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false,\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <div\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon toggled={this.state.showPassword} />\n          </div>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;","export { default } from './PasswordInput';","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** SVG Eye Icon */\nfunction EyeIcon({ toggled }) {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n\n  const fill = toggled\n    ? 'green'\n    : '#4d4d4d';\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill={fill}>\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  );\n}\n\nEyeIcon.propTypes = {\n  /** Indicates coloration of icon */\n  toggled: PropTypes.bool,\n};\n\nexport default EyeIcon;","export { default } from './EyeIcon';","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({\n  htmlFor,\n  label,\n  required,\n}) {\n  return (\n    <label htmlFor={htmlFor}>\n      {label}\n      {required && <span style={{ color: 'red' }}> *</span>}\n    </label>\n  );\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n  /** Label text */\n  label: PropTypes.string.isRequired,\n  /** Display asterisk after label if true */\n  required: PropTypes.bool,\n};\n\nLabel.defaultProps = {\n  required: false,\n};\n\nexport default Label;","export { default } from './Label';\n","module.exports =\n/* eslint-disable */\n[{\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"props\": {\n    \"toggled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Indicates coloration of icon\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon({ toggled }) {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n\\n  const fill = toggled\\n    ? 'green'\\n    : '#4d4d4d';\\n  return (\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill={fill}>\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  );\\n}\\n\\nEyeIcon.propTypes = {\\n  /** Indicates coloration of icon */\\n  toggled: PropTypes.bool,\\n};\\n\\nexport default EyeIcon;\",\n  \"examples\": [{\n    \"name\": \"EyeIcon\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport EyeIcon from 'patterns/EyeIcon';\\n\\nexport default class EyeIconExample extends React.Component {\\n  state = {\\n    toggled: false,\\n  };\\n\\n  toggleEyeColor = () => {\\n    this.setState({\\n      toggled: !this.state.toggled,\\n    });\\n  }\\n\\n  render() {\\n    const { toggled } = this.state;\\n    return (\\n      <div onClick={this.toggleEyeColor}>\\n        <EyeIcon toggled={toggled} />\\n      </div>\\n    );\\n  }\\n}\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({\\n  htmlFor,\\n  label,\\n  required,\\n}) {\\n  return (\\n    <label htmlFor={htmlFor}>\\n      {label}\\n      {required && <span style={{ color: 'red' }}> *</span>}\\n    </label>\\n  );\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool,\\n};\\n\\nLabel.defaultProps = {\\n  required: false,\\n};\\n\\nexport default Label;\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'patterns/Label';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />;\\n}\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"'Password'\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false,\\n    }\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  }\\n\\n  render() {\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? 'text' : 'password'}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}>\\n        {\\n          showVisibilityToggle &&\\n          <div\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}>\\n            <EyeIcon toggled={this.state.showPassword} />\\n          </div>\\n        }\\n        {\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n        }\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from 'react';\\nimport PasswordInput from 'patterns/PasswordInput';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: '',\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  onChange = event => {\\n    this.setState({ password: event.target.value });\\n  }\\n\\n  render() {\\n    return (\\n      <React.Fragment>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={this.onChange}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props}\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nclass ProgressBar extends React.Component {\\n  getColor = percent => {\\n    if (this.props.percent === 100) return 'green';\\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\\n  }\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\n  }\\n\\n  render() {\\n    const { percent, width, height } = this.props;\\n    return (\\n      <div style={{ border: '1px solid lightgray', width }}>\\n        <div style={{\\n          width: this.getWidthAsPercentOfTotalWidth(),\\n          height,\\n          backgroundColor: this.getColor(percent)\\n        }} />\\n      </div>\\n    );\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\n\\nexport default ProgressBar;\",\n  \"examples\": [{\n    \"name\": \"Example100Percent\",\n    \"description\": \"100% progress and height 20px\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'patterns/ProgressBar';\\n\\n/** 100% progress and height 20px */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} height={20} />\\n}\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'patterns/ProgressBar';\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />\\n}\"\n  }, {\n    \"name\": \"Example70Percent\",\n    \"description\": \"70% progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'patterns/ProgressBar';\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />\\n}\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: '',\\n        password: '',\\n      },\\n      errors: {},\\n      submitted: false,\\n    };\\n  }\\n\\n  onChange = event => {\\n    const { user } = this.state;\\n    user[event.target.name] = event.target.value;\\n    this.setState({ user });\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique char, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt((password.length / this.props.minPasswordLength * 100), 10);\\n    return percentOfMinLength;\\n  }\\n\\n  validate({ email, password }) {\\n    const errors = {};\\n    const { minPasswordLength } = this.props;\\n\\n    if (!email) errors.email = 'Email required.';\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({ errors });\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const { user } = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({ submitted: true });\\n    }\\n  }\\n\\n  render() {\\n    const { errors, submitted } = this.state;\\n    const { email, password } = this.state.user;\\n\\n    return (\\n      submitted ?\\n        <h2>{this.props.confirmationMessage}</h2> :\\n        <div>\\n          <TextInput\\n            htmlId=\\\"registration-form-email\\\"\\n            name=\\\"email\\\"\\n            onChange={this.onChange}\\n            label=\\\"Email\\\"\\n            value={email}\\n            error={errors.email}\\n            required\\n          />\\n\\n          <PasswordInput\\n            htmlId=\\\"registration-form-password\\\"\\n            name=\\\"password\\\"\\n            value={password}\\n            onChange={this.onChange}\\n            quality={this.passwordQuality(password)}\\n            showVisibilityToggle\\n            maxLength={50}\\n            error={errors.password}\\n          />\\n\\n          <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n        </div>\\n    )\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport RegistrationForm from 'patterns/RegistrationForm';\\n\\nconst ExampleRegistrationForm = () => {\\n  const onSubmit = (user) => {\\n    console.log(user);\\n  }\\n\\n  return <RegistrationForm onSubmit={onSubmit} />;\\n}\\n\\nexport default ExampleRegistrationForm;\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"'text'\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement and required field marker. */\\nfunction TextInput({\\n  htmlId,\\n  name,\\n  label,\\n  type = 'text',\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  return (\\n    <div style={{ marginBottom: 16 }}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && { border: 'solid 1px red' }}\\n        {...props}\\n      />\\n      {children}\\n      {error && <div className=\\\"error\\\" style={{ color: 'red' }}>{error}</div>}\\n    </div>\\n  )\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n  /** Value */\\n  value: PropTypes.any,\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextInput with error\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'patterns/TextInput';\\n\\n/** Required TextInput with error */\\nexport default function ExampleError() {\\n  return (\\n    <TextInput\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n      required\\n      error=\\\"First name is required.\\\"\\n    />\\n  );\\n}\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextInput\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'patterns/TextInput';\\n\\n/** Optional TextInput */\\nexport default function ExampleOptional() {\\n  return (\\n    <TextInput\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n    />\\n  );\\n}\"\n  }]\n}];","import React from 'react';\nimport EyeIcon from 'patterns/EyeIcon';\n\nexport default class EyeIconExample extends React.Component {\n  state = {\n    toggled: false,\n  };\n\n  toggleEyeColor = () => {\n    this.setState({\n      toggled: !this.state.toggled,\n    });\n  }\n\n  render() {\n    const { toggled } = this.state;\n    return (\n      <div onClick={this.toggleEyeColor}>\n        <EyeIcon toggled={toggled} />\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Label from 'patterns/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />;\n}","import React from 'react';\nimport PasswordInput from 'patterns/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: '',\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  onChange = event => {\n    this.setState({ password: event.target.value });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={this.onChange}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ExampleAllFeatures;","import React from 'react';\nimport ProgressBar from 'patterns/ProgressBar';\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />\n}","import React from 'react';\nimport ProgressBar from 'patterns/ProgressBar';\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />\n}","import React from 'react';\nimport ProgressBar from 'patterns/ProgressBar';\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />\n}","import React from 'react';\nimport TextInput from 'patterns/TextInput';\n\n/** Required TextInput with error */\nexport default function ExampleError() {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n      required\n      error=\"First name is required.\"\n    />\n  );\n}","import React from 'react';\nimport TextInput from 'patterns/TextInput';\n\n/** Optional TextInput */\nexport default function ExampleOptional() {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n    />\n  );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: '',\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = event => {\n    const { user } = this.state;\n    user[event.target.name] = event.target.value;\n    this.setState({ user });\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique char, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt((password.length / this.props.minPasswordLength * 100), 10);\n    return percentOfMinLength;\n  }\n\n  validate({ email, password }) {\n    const errors = {};\n    const { minPasswordLength } = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({ errors });\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const { user } = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({ submitted: true });\n    }\n  }\n\n  render() {\n    const { errors, submitted } = this.state;\n    const { email, password } = this.state.user;\n\n    return (\n      submitted ?\n        <h2>{this.props.confirmationMessage}</h2> :\n        <div>\n          <TextInput\n            htmlId=\"registration-form-email\"\n            name=\"email\"\n            onChange={this.onChange}\n            label=\"Email\"\n            value={email}\n            error={errors.email}\n            required\n          />\n\n          <PasswordInput\n            htmlId=\"registration-form-password\"\n            name=\"password\"\n            value={password}\n            onChange={this.onChange}\n            quality={this.passwordQuality(password)}\n            showVisibilityToggle\n            maxLength={50}\n            error={errors.password}\n          />\n\n          <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n        </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;","import React from 'react';\nimport RegistrationForm from 'patterns/RegistrationForm';\n\nconst ExampleRegistrationForm = () => {\n  const onSubmit = (user) => {\n    console.log(user);\n  }\n\n  return <RegistrationForm onSubmit={onSubmit} />;\n}\n\nexport default ExampleRegistrationForm;","var map = {\n\t\"./EyeIcon/EyeIcon\": 15,\n\t\"./EyeIcon/EyeIcon.js\": 15,\n\t\"./Label/ExampleOptional\": 16,\n\t\"./Label/ExampleOptional.js\": 16,\n\t\"./PasswordInput/ExampleAllFeatures\": 17,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 17,\n\t\"./ProgressBar/Example100Percent\": 18,\n\t\"./ProgressBar/Example100Percent.js\": 18,\n\t\"./ProgressBar/Example10Percent\": 19,\n\t\"./ProgressBar/Example10Percent.js\": 19,\n\t\"./ProgressBar/Example70Percent\": 20,\n\t\"./ProgressBar/Example70Percent.js\": 20,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 23,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 23,\n\t\"./TextInput/ExampleError\": 21,\n\t\"./TextInput/ExampleError.js\": 21,\n\t\"./TextInput/ExampleOptional\": 22,\n\t\"./TextInput/ExampleOptional.js\": 22\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 36;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst Navigation = ({ components }) => {\n  const mapNavItems = (navItems) => {\n    return navItems.map(name => {\n      const linkClass = classnames('navigation-link', {\n        active: window.location.href.includes(name)\n      });\n\n      return (\n        <li key={name}>\n          <a className={linkClass} href={`#${name}`}>{name}</a>\n        </li>\n      );\n    });\n  };\n  return (\n    <ul className=\"navigation\">\n      {mapNavItems(components)}\n    </ul>\n  );\n};\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Prism from 'prismjs';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <pre ref={ref => { this.element = ref }}>\n          <code className=\"language-javascript\">\n            {this.props.children}\n          </code>\n        </pre>\n      </React.Fragment>\n    );\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\nimport ReactDOMServer from 'react-dom/server';\n\nexport default function Example(props) {\n  const { code, description, name } = props.example;\n  // We have to use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n  const ExampleComponent = require(`./examples/${props.componentName}/${name}`).default;\n  const html = ReactDOMServer.renderToStaticMarkup(<ExampleComponent />);\n  return (\n    <div className=\"example\">\n      {description && <h4>Example: {description}</h4>}\n      <ExampleComponent />\n      <CodeExample html={html}>{code}</CodeExample>\n    </div>\n  );\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({props}) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Required</th>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          Object.keys(props).map(key => {\n            return (\n              <tr key={key}>\n                <td>{props[key].required && 'X'}</td>\n                <td>{key}</td>\n                <td>{props[key].description}</td>\n                <td>{props[key].type.name}</td>\n                <td>\n                  {\n                    props[key].defaultValue\n                      ? props[key].defaultValue.value\n                      : '-'\n                  }\n                </td>\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </table>\n  );\n}\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;","import React from 'react';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component;\n\n  const renderExamples = () => {\n    return examples && examples.length > 0\n      ? examples.map(\n        example =>\n        <Example key={example.code} example={example} componentName={name} />\n      )\n      : 'No examples exist.';\n  }\n\n  const renderProps = () => {\n    return props\n      ? <Props props={props} />\n      : (\n        <div className=\"props\">\n          This component accepts no props.\n        </div>\n      );\n  }\n\n  return (\n    <React.Fragment>\n      <h2>{name}</h2>\n      <a href=\"#\">Source</a>\n      <p>{description}</p>\n      {renderProps()}\n      {examples && <React.Fragment>\n        {renderExamples()}\n      </React.Fragment>}\n    </React.Fragment>\n  );\n}\n\nexport default ComponentPage;","import React from 'react';\n\nexport default function Homepage() {\n  return (\n    <React.Fragment>\n      <p>Simple React components to show a custom implementation of a pattern library.</p>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport Navigation from './Navigation';\nimport ComponentPage from './ComponentPage';\nimport Homepage from './Homepage';\nimport componentData from '../../config/componentData';\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1),\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('hashchange', () => {\n      this.setState({ route: window.location.hash.substr(1) });\n    });\n  }\n\n  renderRoute = (route) => {\n    return route\n      ? componentData.filter(component => component.name === route)[0]\n      : {};\n  }\n\n  renderComponents = () => {\n    return componentData.map(component => component.name);\n  }\n\n  render() {\n    const { route } = this.state;\n    const component = this.renderRoute(route);\n\n    return (\n      <div className=\"page-grid\">\n        <div className=\"page-head\">\n          <h1>Pattern Library</h1>\n        </div>\n        <Navigation components={this.renderComponents()} />\n        <div className=\"component-page\">\n          {route\n            ? <ComponentPage component={component} />\n            : <Homepage />\n          }\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      /* eslint-disable no-param-reassign */\n      registration.onupdatefound = () => {\n      /* eslint-enable no-param-reassign */\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Docs from './docs/Docs';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/prismjs/themes/prism-tomorrow.css';\n\nReactDOM.render(<Docs />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}